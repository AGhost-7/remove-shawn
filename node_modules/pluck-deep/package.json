{
  "name": "pluck-deep",
  "version": "0.2.2",
  "description": "Pluck values of a collection given a dot separated string",
  "main": "index.js",
  "scripts": {
    "pretest": "jshint --reporter node_modules/jshint-stylish/stylish.js index.js test.js",
    "test": "mocha -R nyan test.js"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/landau/pluck-deep.git"
  },
  "keywords": [
    "functional",
    "pluck",
    "object",
    "array",
    "map",
    "deep",
    "deep pluck",
    "keys",
    "values"
  ],
  "author": {
    "name": "Trevor Landau",
    "email": "landautrevor@gmail.com"
  },
  "license": "ISC",
  "bugs": {
    "url": "https://github.com/landau/pluck-deep/issues"
  },
  "homepage": "https://github.com/landau/pluck-deep",
  "devDependencies": {
    "jshint-stylish": "^0.1.5",
    "mocha": "^1.18.2",
    "jshint": "^2.5.0"
  },
  "readme": "[![Build Status](https://travis-ci.org/landau/pluck-deep.svg)](https://travis-ci.org/landau/pluck-deep)\n\npluck-deep\n==========\n\nPluck values of a collection given a 'dot' separated string\n\n```js\nmodule.exports = function pluckDeep(coll, selector) { ... }\n```\n\n## Install\n\n`npm i -S pluck-deep`\n\n## Usage\n\n`deep-pluck` accepts an `array` or `object` as an initial argument.\n\nYou can pick a `value` or `array of values` by passing in a `selector`.\n\n### Selectors\n\nFor the purpose of `deep-pluck` a `selector` is a `string` with object\nvalue accessors separated with a `.`. In other words, you can retrieve\na value just like you would on any object, except that these selectors\nwill automatically `map` an array of values for you.\n\n```js\n// Example selectors\n'planet.earth.size' // returns a single value set a size\n'planet.saturn.moons.name' // Will return an array of moon names\n```\n\n> See below examples and tests for more selectors\n\n### Value plucking\n\n```js\nvar sel = 'mercury.venus';\nvar o = {\n  mercury: {\n    venus: 'earth'\n  }\n};\n\nvar v = pluckDeep(o, sel);\nassert.equal(v, o.mercury.venus);\n```\n\n### Array plucking\n\n```js\nvar sel = 'saturn.moons.name';\nvar o = {\n  saturn: {\n    moons: [\n      { name: 'titan' },\n      { name: 'enceladus' },\n      { name: 'rhea' }\n    ]\n  }\n};\n\nvar arr = pluckDeep(o, sel);\nvar expect = o.saturn.moons.map(prop('name'));\nassert.deepEqual(arr, expect);\n```\n\n### Filterable\n\nAdd a filterable statment to filter out return values based on some comparable\n\n```js\nvar sel = 'system.planets.name[type=dwarf]';\nvar o = {\n  system: {\n    planets: [\n      {\n        name: 'earth',\n        type: 'ocean',\n      },\n      {\n        name: 'pluto',\n        type: 'dwarf',\n      }\n    ]\n  }\n};\n\nvar v = pluckDeep(o, sel);\nassert(Array.isArray(v));\nassert.equal(v.length, 1);\nassert.equal(v[0], 'pluto');\n\n// With an object\nvar sel = 'rings[type=gas]';\nvar venus = {\n  type: 'gas',\n  rings: false\n};\n\nvar v = pluckDeep(venus, sel);\nassert.equal(v, false);\n```\n\n## Changelog\n\n#### 0.2.2\n- Use regex for filters\n\n#### 0.2.1\n- Fixed typo in test\n\n#### 0.2.0\n- Added filterables\n\n#### 0.1.1\n- Added an extra santity test\n",
  "readmeFilename": "README.md",
  "_id": "pluck-deep@0.2.2",
  "dist": {
    "shasum": "193c562e4730805e599ad09647ef5eab2a4f3d48"
  },
  "_from": "pluck-deep@",
  "_resolved": "https://registry.npmjs.org/pluck-deep/-/pluck-deep-0.2.2.tgz"
}
